// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	stemcell "bosh-softlayer-cpi/softlayer/stemcell_service"
	"sync"
)

type FakeService struct {
	FindStub        func(id int) (string, error)
	findMutex       sync.RWMutex
	findArgsForCall []struct {
		id int
	}
	findReturns struct {
		result1 string
		result2 error
	}
	findReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	CreateFromTarballStub        func(imagePath string, datacenter string, osCode string) (int, error)
	createFromTarballMutex       sync.RWMutex
	createFromTarballArgsForCall []struct {
		imagePath  string
		datacenter string
		osCode     string
	}
	createFromTarballReturns struct {
		result1 int
		result2 error
	}
	createFromTarballReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeService) Find(id int) (string, error) {
	fake.findMutex.Lock()
	ret, specificReturn := fake.findReturnsOnCall[len(fake.findArgsForCall)]
	fake.findArgsForCall = append(fake.findArgsForCall, struct {
		id int
	}{id})
	fake.recordInvocation("Find", []interface{}{id})
	fake.findMutex.Unlock()
	if fake.FindStub != nil {
		return fake.FindStub(id)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.findReturns.result1, fake.findReturns.result2
}

func (fake *FakeService) FindCallCount() int {
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	return len(fake.findArgsForCall)
}

func (fake *FakeService) FindArgsForCall(i int) int {
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	return fake.findArgsForCall[i].id
}

func (fake *FakeService) FindReturns(result1 string, result2 error) {
	fake.FindStub = nil
	fake.findReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeService) FindReturnsOnCall(i int, result1 string, result2 error) {
	fake.FindStub = nil
	if fake.findReturnsOnCall == nil {
		fake.findReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.findReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeService) CreateFromTarball(imagePath string, datacenter string, osCode string) (int, error) {
	fake.createFromTarballMutex.Lock()
	ret, specificReturn := fake.createFromTarballReturnsOnCall[len(fake.createFromTarballArgsForCall)]
	fake.createFromTarballArgsForCall = append(fake.createFromTarballArgsForCall, struct {
		imagePath  string
		datacenter string
		osCode     string
	}{imagePath, datacenter, osCode})
	fake.recordInvocation("CreateFromTarball", []interface{}{imagePath, datacenter, osCode})
	fake.createFromTarballMutex.Unlock()
	if fake.CreateFromTarballStub != nil {
		return fake.CreateFromTarballStub(imagePath, datacenter, osCode)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createFromTarballReturns.result1, fake.createFromTarballReturns.result2
}

func (fake *FakeService) CreateFromTarballCallCount() int {
	fake.createFromTarballMutex.RLock()
	defer fake.createFromTarballMutex.RUnlock()
	return len(fake.createFromTarballArgsForCall)
}

func (fake *FakeService) CreateFromTarballArgsForCall(i int) (string, string, string) {
	fake.createFromTarballMutex.RLock()
	defer fake.createFromTarballMutex.RUnlock()
	return fake.createFromTarballArgsForCall[i].imagePath, fake.createFromTarballArgsForCall[i].datacenter, fake.createFromTarballArgsForCall[i].osCode
}

func (fake *FakeService) CreateFromTarballReturns(result1 int, result2 error) {
	fake.CreateFromTarballStub = nil
	fake.createFromTarballReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeService) CreateFromTarballReturnsOnCall(i int, result1 int, result2 error) {
	fake.CreateFromTarballStub = nil
	if fake.createFromTarballReturnsOnCall == nil {
		fake.createFromTarballReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.createFromTarballReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	fake.createFromTarballMutex.RLock()
	defer fake.createFromTarballMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ stemcell.Service = new(FakeService)
