// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"bosh-softlayer-cpi/softlayer/common"
	bslcstem "bosh-softlayer-cpi/softlayer/stemcell"
	"sync"
)

type FakeVMCreator struct {
	CreateStub        func(string, bslcstem.Stemcell, common.VMCloudProperties, common.Networks, common.Environment) (common.VM, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 string
		arg2 bslcstem.Stemcell
		arg3 common.VMCloudProperties
		arg4 common.Networks
		arg5 common.Environment
	}
	createReturns struct {
		result1 common.VM
		result2 error
	}
	createReturnsOnCall map[int]struct {
		result1 common.VM
		result2 error
	}
	GetAgentOptionsStub        func() common.AgentOptions
	getAgentOptionsMutex       sync.RWMutex
	getAgentOptionsArgsForCall []struct{}
	getAgentOptionsReturns     struct {
		result1 common.AgentOptions
	}
	getAgentOptionsReturnsOnCall map[int]struct {
		result1 common.AgentOptions
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeVMCreator) Create(arg1 string, arg2 bslcstem.Stemcell, arg3 common.VMCloudProperties, arg4 common.Networks, arg5 common.Environment) (common.VM, error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 string
		arg2 bslcstem.Stemcell
		arg3 common.VMCloudProperties
		arg4 common.Networks
		arg5 common.Environment
	}{arg1, arg2, arg3, arg4, arg5})
	fake.recordInvocation("Create", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createReturns.result1, fake.createReturns.result2
}

func (fake *FakeVMCreator) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeVMCreator) CreateArgsForCall(i int) (string, bslcstem.Stemcell, common.VMCloudProperties, common.Networks, common.Environment) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].arg1, fake.createArgsForCall[i].arg2, fake.createArgsForCall[i].arg3, fake.createArgsForCall[i].arg4, fake.createArgsForCall[i].arg5
}

func (fake *FakeVMCreator) CreateReturns(result1 common.VM, result2 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 common.VM
		result2 error
	}{result1, result2}
}

func (fake *FakeVMCreator) CreateReturnsOnCall(i int, result1 common.VM, result2 error) {
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 common.VM
			result2 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 common.VM
		result2 error
	}{result1, result2}
}

func (fake *FakeVMCreator) GetAgentOptions() common.AgentOptions {
	fake.getAgentOptionsMutex.Lock()
	ret, specificReturn := fake.getAgentOptionsReturnsOnCall[len(fake.getAgentOptionsArgsForCall)]
	fake.getAgentOptionsArgsForCall = append(fake.getAgentOptionsArgsForCall, struct{}{})
	fake.recordInvocation("GetAgentOptions", []interface{}{})
	fake.getAgentOptionsMutex.Unlock()
	if fake.GetAgentOptionsStub != nil {
		return fake.GetAgentOptionsStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.getAgentOptionsReturns.result1
}

func (fake *FakeVMCreator) GetAgentOptionsCallCount() int {
	fake.getAgentOptionsMutex.RLock()
	defer fake.getAgentOptionsMutex.RUnlock()
	return len(fake.getAgentOptionsArgsForCall)
}

func (fake *FakeVMCreator) GetAgentOptionsReturns(result1 common.AgentOptions) {
	fake.GetAgentOptionsStub = nil
	fake.getAgentOptionsReturns = struct {
		result1 common.AgentOptions
	}{result1}
}

func (fake *FakeVMCreator) GetAgentOptionsReturnsOnCall(i int, result1 common.AgentOptions) {
	fake.GetAgentOptionsStub = nil
	if fake.getAgentOptionsReturnsOnCall == nil {
		fake.getAgentOptionsReturnsOnCall = make(map[int]struct {
			result1 common.AgentOptions
		})
	}
	fake.getAgentOptionsReturnsOnCall[i] = struct {
		result1 common.AgentOptions
	}{result1}
}

func (fake *FakeVMCreator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.getAgentOptionsMutex.RLock()
	defer fake.getAgentOptionsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeVMCreator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ common.VMCreator = new(FakeVMCreator)
