<%=
  params = {
    'cloud' => {
      'plugin' => 'softlayer',
      'properties' => {
        'softlayer' => {
          'username' => p('softlayer.username'),
          'apiKey' => p('softlayer.apiKey'),
        },
        'agent' => {
          'ntp' => p('ntp')
        }
      }
    }
  }
  if_p('softlayer.featureOptions') do
    softlayer_feature_options_params = {}
    if_p('softlayer.featureOptions.enablePool') do |enablePool|
      softlayer_feature_options_params.merge!('enablePool' => enablePool)
    end
    if_p('softlayer.featureOptions.disableOsReload') do |disableOsReload|
      softlayer_feature_options_params.merge!('disableOsReload' => disableOsReload)
    end
    if_p('softlayer.featureOptions.apiEndpoint') do |apiEndpoint|
      softlayer_feature_options_params.merge!('apiEndpoint' => apiEndpoint)
    end
    if_p('softlayer.featureOptions.apiWaitTime') do |apiWaitTime|
      softlayer_feature_options_params.merge!('apiWaitTime' => apiWaitTime)
    end
    if_p('softlayer.featureOptions.apiRetryCount') do |apiRetryCount|
      softlayer_feature_options_params.merge!('apiRetryCount' => apiRetryCount)
    end
    if_p('softlayer.featureOptions.createIscsiVolumeTimeout') do |createIscsiVolumeTimeout|
      softlayer_feature_options_params.merge!('createIscsiVolumeTimeout' => createIscsiVolumeTimeout)
    end
    if_p('softlayer.featureOptions.createIscsiVolumePollingInterval') do |createIscsiVolumePollingInterval|
      softlayer_feature_options_params.merge!('createIscsiVolumePollingInterval' => createIscsiVolumePollingInterval)
    end
    params['cloud']['properties']['softlayer']['featureOptions'] = softlayer_feature_options_params
  end
  if_p('baremetal') do
    baremetal_params = {}
    if_p('baremetal.username') do |username|
      baremetal_params.merge!('username' => username)
    end
    if_p('baremetal.password') do |password|
      baremetal_params.merge!('password' => password)
    end
    if_p('baremetal.endpoint') do |endpoint|
      baremetal_params.merge!('endpoint' => endpoint)
    end
    params['cloud']['properties']['baremetal'] = baremetal_params
  end
  if_p('pool') do
    pool_params = {}
    if_p('pool.host') do |host|
      pool_params.merge!('host' => host)
    end
    if_p('pool.port') do |port|
      pool_params.merge!('port' => port)
    end
    params['cloud']['properties']['pool'] = pool_params
  end
  if_p('blobstore') do
    blobstore_params = {
      'provider' => p('blobstore.provider')
    }
    if p('blobstore.provider') == 's3'
      options_params = {
        'bucket_name' => p('blobstore.bucket_name'),
        'access_key_id' => p(['agent.blobstore.access_key_id', 'blobstore.access_key_id']),
        'secret_access_key' => p(['agent.blobstore.secret_access_key', 'blobstore.secret_access_key'])
      }
      def update_blobstore_options(options, manifest_key, rendered_key=manifest_key)
        value = p(["agent.blobstore.#{manifest_key}", "blobstore.#{manifest_key}"], nil)
        options[rendered_key] = value unless value.nil?
      end
      update_blobstore_options(options_params, 'use_ssl')
      update_blobstore_options(options_params, 's3_port', 'port')
      update_blobstore_options(options_params, 'host')
      update_blobstore_options(options_params, 's3_force_path_style')
    elsif p('blobstore.provider') == 'local'
      options_params = {
        'blobstore_path' => p('blobstore.path')
      }
    else
      options_params = {
        'endpoint' => "http://#{p(['agent.blobstore.address', 'blobstore.address'])}:#{p('blobstore.port')}",
        'user' => p('blobstore.agent.user'),
        'password' => p('blobstore.agent.password')
      }
    end
    blobstore_params['options'] = options_params
    params['cloud']['properties']['agent']['blobstore'] = blobstore_params
  end
  if_p('agent.vcappassword') do |vcappassword|
    params['cloud']['properties']['agent']['vcappassword'] = vcappassword
  end
  if_p('agent.mbus') do |mbus|
    params['cloud']['properties']['agent']['mbus'] = mbus
  end.else_if_p('nats') do
    params['cloud']['properties']['agent']['mbus'] = "nats://#{p('nats.user')}:#{p('nats.password')}@#{p(['agent.nats.address', 'nats.address'])}:#{p('nats.port')}"
  end
  JSON.dump(params)
%>